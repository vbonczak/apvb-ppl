
open Array

type 'a support = { values : 'a array;
                    logits : float array;
                    probs : float array;
                  }

type 'a dist = { support : 'a support option;
                 sample : unit -> 'a;
                 logpdf : 'a -> float;
                 exp : (unit -> float) option;
                 var : (unit -> float) option;
               }

let print_f d = (* A function that prints float dists *)
  let { values; probs; _ } = Option.get d.support in
  Array.iteri (fun i x -> Format.printf "%f %f@." x probs.(i)) values
;;

let print_i d = (* A function that prints int dists *)
  let { values; probs; _ } = Option.get d.support in
  Array.iteri (fun i x -> Format.printf "%d %f@." x probs.(i)) values
;;

let bernoulli p =
  assert(0. <= p && p <= 1.);
  let values = [|0; 1|] in
  let probs = [|1. -. p; p|] in
  let support = {values = values;
                 logits = Array.map log probs;
                 probs = probs}
  in
  let sample () = if Random.float 1. <= p then 1 else 0 in
  let logpdf x = assert(x = 0 || x = 1); support.logits.(x) in
  let exp () = p in
  let var () = p *. (1. -. p) in
  let d = {support = Some support;
           sample = sample;
           logpdf = logpdf;
           exp = Some exp;
           var = Some var;
          } in
  d
;;

let bernoulli_f p = (* Same as bernoulli but of type float dist *)
  assert(0. <= p && p <= 1.);
  let values = [|0.; 1.|] in
  let probs = [|1. -. p; p|] in
  let support = {values = values;
                 logits = Array.map log probs;
                 probs = probs}
  in
  let sample () = if Random.float 1. <= p then 1. else 0. in
  let logpdf x = assert(x = 0. || x = 1.); support.logits.(int_of_float x) in
  let exp () = p in
  let var () = p *. (1. -. p) in
  let d = {support = Some support;
           sample = sample;
           logpdf = logpdf;
           exp = Some exp;
           var = Some var;
          } in
  d
;;

let rec pow_int a n = match n with
  |0 -> 1
  |_ -> a * (pow_int a (n-1))
;;

let rec pow_float a n = match n with
  |0 -> 1.
  |_ -> a *. (pow_float a (n-1))
;;

let binomial p n =
  assert(0. <= p && p <= 1. && n >= 0);
  let values = Array.init (pow_int 2 n)
                 (fun i -> Array.init n (fun j -> i/(pow_int 2 j) mod 2))
  in
  (* Each element is an array containing a sequence of ones and zeroes, each element is the binary representation of the current index. *)
  let probs = Array.init (pow_int 2 n)
                (fun i ->
                  let k = Array.fold_left (+) 0 (values.(i)) in
                  (pow_float p k) *. (pow_float (1. -. p) (n-k)))
  in
  let support = {values = values;
                 logits = Array.map log probs;
                 probs = probs;
                } in
  let sample () = Array.init n
                    (fun _ -> if Random.float 1. <= p then 1 else 0)
  in
  let logpdf x = assert(length x = n);
                 Array.iter (fun y -> assert(y = 0 || y = 1)) x;
                 let k = Array.fold_left (+) 0 x in
                 log ((pow_float p k) *. (pow_float (1. -. p) (n-k)))
  in
  let exp () = float_of_int n *. p in
  let var () = float_of_int n *. p *. (1. -. p) in
  let d = {support = Some support;
           sample = sample;
           logpdf = logpdf;
           exp = Some exp;
           var = Some var;
          } in
  d
;;

let uniform a b =
  assert(a < b);
  let sample () = a +. Random.float (b-.a) in
  let logpdf x = if (a <= x && x <= b) then 1. /. (b -. a) else 0. in
  let exp () = (a +. b) /. 2. in
  let var () = (pow_float (b -. a) 2) /. 12. in
  let d = {support = None;
           sample = sample;
           logpdf = logpdf;
           exp = Some exp;
           var = Some var;
          } in
  d
;;

let uniform_int n = (* Random integer between 0 and n-1 *)
  assert(n > 0);
  let values = Array.init n (fun x -> x) in
  let probs = Array.make n (1. /. (float_of_int n)) in
  let support = {values = values;
                 logits = Array.map log probs;
                 probs = probs}
  in
  let sample () = int_of_float ((uniform 0. (float_of_int n)).sample()) in
  let logpdf x = assert(x >= 0 && x <= n-1); support.logits.(x) in
  let exp () = ((float_of_int n) -. 1.) /. 2. in
  (*let var () = *)
  let d = {support = None;
           sample = sample;
           logpdf = logpdf;
           exp = Some exp;
           var = None;
          } in
  d
;;

let rec remove x q = match q with (* This function returns q with occurences of x removed and the number of such values removed. *)
  |[] -> [], 0.
  |y::q when y=x -> let l, occs = remove x q in l, occs +. 1.
  |y::q -> let l, occs = remove x q in y::l, occs
;;

let rec regroup l n = match l with (* Returns two lists l1 and l2, l1 gives the elements of l without repetition and l2 gives the corresponding proportion of occurences of each element in l. *)
  |[] -> [],[]
  |x:: _ ->
    begin
      let l', occs = remove x l in
      let values, occurences = regroup l' n in
      x::values, (occs /. n)::occurences
    end
;;

module Rejection_sampling = struct

exception Reject;;

let assume bool = if not bool then raise Reject else ();;

let observe d x = assume (d.sample() = x);;

let infer n f = (* Version for finite support and rejection sampling. *)
  assert(n > 0);
  let rec aux n = match n with
  |0 -> []
  |n -> try let x=f() in x::(aux (n-1)) with Reject -> aux n
  in
  let vals, proportions = regroup (aux n) (float_of_int n) in
  let values = Array.of_list vals in
  let probs = Array.of_list proportions in
  let support = {values = values;
                 logits = Array.map log probs;
                 probs = probs}
  in
  
  let sample () =
    let p = Random.float 1. in (* Assume we split the interval [0,1] into length(prob) intervals, with interval i having length prob.(i). We then generate a random float between 0 and 1 and see which interval it falls in to generate a random value according to prob. *)
    let i = ref 0 in
    let x = ref 0. in
    while p > !x +. support.probs.(!i) do x := !x +. support.probs.(!i); incr i; done;
    support.values.(!i)
  in
  let logpdf x =
    let index, bool = Array.fold_left
                        (fun (i,b) y -> if b || y = x then (i,true) else (i+1,b))
                        (0,false)
                        values
    in
    assert(bool);
    support.logits.(index) in
  (*let exp = try Some( fun () ->
      let m = ref 0. in
      for i=0 to Array.length values-1 do
        m := !m +. values.(i) *. probs.(i)
      done;
      !m)
      with _ -> None in*)
  let d = {support = Some support;
           sample = sample;
           logpdf = logpdf;
           exp = None;
           var = None;
          } in
  d
;;

let sample d = d.sample();;

end

exception DifferentSize

let rec remove_with_score x q scores = match q, scores with (* This function returns q with occurences of x removed, scores with scores corresponding to x removed, and the total score of elements x in q. *)
  |[], [] -> [], [], 0.
  |[], _ |_, [] -> raise DifferentSize
  |y::q, score::s when y=x -> let l1, l2, total_score = remove_with_score x q s in l1, l2, score +. total_score
  |y::q, score::s -> let l1, l2, total_score = remove_with_score x q s in y::l1, score::l2, total_score
;;

let rec regroup_with_score (values, exp_scores) = match values with (* Returns two lists l1 and l2, l1 gives the elements of values without repetition and l2 gives the total score of each element in l. The scores are now assumed to be no longer in logarithmic form since we need to compute the sum. *)
  |[] -> [],[]
  |x:: _ ->
    begin
      let l1, l2, total_score = remove_with_score x values exp_scores in
      let values, scores = regroup_with_score (l1, l2) in
      x::values, total_score::scores
    end
;;
  
module Importance_sampling = struct

  exception ZeroScore
  
  let sample d = d.sample();;

  let factor score s = score := !score +. s;;

  let observe score d x = score := !score +. (d.logpdf x);;

  let assume score bool = if not bool then score := neg_infinity;;

  let infer n model obs =
    assert(n > 0);
    let rec aux n = match n with
      |0 -> [],[]
      |n -> let score = ref 0. in
            let x = model score obs in
            let l1, l2 = aux (n-1) in
            x::l1, (exp !score)::l2 (* Once the calculations done with log probabilities, we return to regular probabilities to regroup scores for the same values. *) 
    in
    let vals, scores = regroup_with_score (aux n) in
    let rec sum_scores scores = match scores with
      |[] -> 0.
      |x::q -> x +. (sum_scores q)
    in
    let total_score = sum_scores scores in
    if total_score = 0. then raise ZeroScore;
    let values = Array.of_list vals in
    let probs = Array.of_list (List.map (fun x -> x /. total_score) scores) in
    let support = {values = values;
                   logits = Array.map log probs;
                   probs = probs}
    in
  
    let sample () =
      let p = (uniform 0. 1.).sample() in (* Assume we split the interval [0,1] into length(prob) intervals, with interval i having length prob.(i). We then generate a random float between 0 and 1 and see which interval it falls in to generate a random value according to prob. *)
      let i = ref 0 in
      let x = ref 0. in
      while p > !x +. support.probs.(!i) do x := !x +. support.probs.(!i); incr i; done;
      support.values.(!i)
    in
    let logpdf x =
      let index, bool = Array.fold_left
                          (fun (i,b) y -> if b || y = x then (i,true) else (i+1,b))
                          (0,false)
                          values
      in
      assert(bool);
      support.logits.(index) in
    let d = {support = Some support;
             sample = sample;
             logpdf = logpdf;
             exp = None;
             var = None;
            } in
    d
  ;;
               
end
                               


module MH_Multi = struct

  exception ZeroScore
  
  let sample d = d.sample();;
  
  let infer n f score = (* score takes a sample as input, and returns a float as score *)
    let x = f() (* First sample *) in
    let w0 = score x in
    let rec aux n x w = match n with
      |0 -> [x], [w]
      |n -> begin
          let y = f() in
          let wi = score y in
          let p = (uniform 0. 1.).sample() in 
          if p *. w <= wi
          then
            let l1, l2 = aux (n-1) y wi in
            y::l1, wi::l2
          else
            let l1, l2 = aux (n-1) x w in
            x::l1, w::l2
        end
    in
    let vals, scores = regroup_with_score (aux (n-1) x w0) in
    let rec sum_scores scores = match scores with
      |[] -> 0.
      |x::q -> x +. (sum_scores q)
    in
    let total_score = sum_scores scores in
    if total_score = 0. then raise ZeroScore;
    let values = Array.of_list vals in
    let probs = Array.of_list (List.map (fun x -> x /. total_score) scores) in
    let support = {values = values;
                   logits = Array.map log probs;
                   probs = probs}
    in
  
    let sample () =
      let p = (uniform 0. 1.).sample() in (* Assume we split the interval [0,1] into length(prob) intervals, with interval i having length prob.(i). We then generate a random float between 0 and 1 and see which interval it falls in to generate a random value according to prob. *)
      let i = ref 0 in
      let x = ref 0. in
      while p > !x +. support.probs.(!i) do x := !x +. support.probs.(!i); incr i; done;
      support.values.(!i)
    in
    let logpdf x =
      let index, bool = Array.fold_left
                          (fun (i,b) y -> if b || y = x then (i,true) else (i+1,b))
                          (0,false)
                          values
      in
      assert(bool);
      support.logits.(index) in
    let d = {support = Some support;
             sample = sample;
             logpdf = logpdf;
             exp = None;
             var = None;
            } in
    d
  ;;

end

type location = LDecl of int (* Which declaration in a sequence of instructions without for or if *)
              | LIf of bool * location
              | LFor of int * location
(* Describes where a variable is located in the code so as to distinguish different instructions of the form "let x = sample ..." *)
  
type variable = string * location (* name and location *)
                
module MH_Single = struct (* Assume all samples return type float. *)

  exception ZeroScore
  
  let sampled_variables = ref [];;

  let sample v d = (* v is a variable, d is a distribution *)
    let rec aux l = match l with
      |[] -> d.sample() (* variable needs to be sampled from fresh *)
      |(x, value)::_ when x = v -> value (* variable musn't be resampled *)
      |_::l'-> aux l'
    in
    aux !sampled_variables
  ;;

  let remove_random_var var_and_samps =
    let rec remove_deps vars dep_list = (* Removes all variables that depend on an element in dep_list *)
      match vars with
      |[] -> []
      |(x,x_deps,a)::vars2 -> let rec aux deps = match deps with (* If x is in deps we remove it and proceed with vars2, otherwise we keep it. *)
                         |[] -> (x,a)::(remove_deps vars2 dep_list)
                         |y::_ when y = x -> remove_deps vars2 ((!x_deps)@dep_list) (* If x needs to be removed, we also want those depending on x to be removed. *)
                         |_::deps2 -> aux deps2
                       in
                       aux dep_list
    in
    let n = List.length var_and_samps in
    let i = (uniform_int n).sample() in (* index of the variable in var_and_samps that we will resample *)
    let (var_to_resample,_,_) = List.nth var_and_samps i in
    remove_deps var_and_samps [var_to_resample]
  ;;
  
  let infer n f score =
    let x, variables_and_samples = f() in (* f() returns the expected result of f, but also a list containing, for each distinct variable x (may be the same name at a different location) encountered, the triple (x, variables that depend on x, value of x) *)
    let w0 = score x in
    let rec aux n x w var_and_samps = match n with
      |0 -> [x], [w]
      |n -> begin
          sampled_variables := remove_random_var var_and_samps;
          let y, var_and_samps2 = f() in
          let wi = score y in
          let p = (uniform 0. 1.).sample() in
          if p *. w <= wi
          then
            let l1, l2 = aux (n-1) y wi var_and_samps2 in
            y::l1, wi::l2
          else
            let l1, l2 = aux (n-1) x w var_and_samps in
            x::l1, w::l2
        end
    in
    let vals, scores = regroup_with_score (aux (n-1) x w0 variables_and_samples)
    in
    let rec sum_scores scores = match scores with
      |[] -> 0.
      |x::q -> x +. (sum_scores q)
    in
    let total_score = sum_scores scores in
    if total_score = 0. then raise ZeroScore;
    let values = Array.of_list vals in
    let probs = Array.of_list (List.map (fun x -> x /. total_score) scores) in
    let support = {values = values;
                   logits = Array.map log probs;
                   probs = probs}
    in
  
    let sample () =
      let p = (uniform 0. 1.).sample() in (* Assume we split the interval [0,1] into length(prob) intervals, with interval i having length prob.(i). We then generate a random float between 0 and 1 and see which interval it falls in to generate a random value according to prob. *)
      let i = ref 0 in
      let x = ref 0. in
      while p > !x +. support.probs.(!i) do x := !x +. support.probs.(!i); incr i; done;
      support.values.(!i)
    in
    let logpdf x =
      let index, bool = Array.fold_left
                          (fun (i,b) y -> if b || y = x then (i,true) else (i+1,b))
                          (0,false)
                          values
      in
      assert(bool);
      support.logits.(index) in
    let d = {support = Some support;
             sample = sample;
             logpdf = logpdf;
             exp = None;
             var = None;
            } in
    d
  ;;

end
                 
